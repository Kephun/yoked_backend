name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21' # Matches the stable version in RHEL 9.x

      - name: Download dependencies
        run: go mod download

      - name: Run Tests
        run: go test -v ./...

      - name: Run Linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
  
  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: test 
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: yoked_backend_test
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retires 5
          ports:
            - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: Set up Go
        uses: actions/checkout@v4
        with:
          go-version: '1.21.'

      - name: Install PostgreSQL client and Newman
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo npm install -g newman

      - name: Download dependencies
        run: go mod download

      - name: Build Binary
        run: go build -o server .

      - name: Setup test database
        run: |
          export PGPASSWORD=postgres
          psql -h localhost -U postgres -d yoked_backend_test -c "DROP DATABASE IF EXISTS yoked_db;"
          psql -h localhost -U postgres -c "CREATE DATABASE yoked_backend_test;"
          psql -h localhost -U postgres -d yoked_backend_test -f interal/db/schema.sql

        - name: Start server in background
          run: |
            export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/yoked_backend_test?sslmode=disable"
            export JWT_SECRET="test-secret-key-for-di-cd"
            export SERVER_PORT="8080"
            export SERVER_HOST="0.0.0.0"
            ./server &
            echo "SERVER_PID$!">> $GITHUB_ENV
            sleep 5
        - name: Wait for server health check
          run: |
            timeout 30s bash -c 'until curl -f http://localhost:8080/health >/dev/null 2>&1; do
              echo "Waiting for server to start.."
              sleep 2
            done'
        - name: Run API test with Newman
          run: |
            newman run postman_collection.json \
              --environment postman_environment.json \
              --reporters cli,json \
              --reporter-json-export newman-report.json \
              --disable-unicode
        - name: Upload test results
          uses: actions/upload-artifact@v3
          with:
            name: newman-report
            path: newman-report.json
        
        - name: Stop Server
          run: |
            kill $SERVER_PID 2>/dev/null || true

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Download dependencies
        run: go mod download

      - name: Build Binary
        run: go build -o server .
